function [U,n] = referenceDomainFrwdBkwrdEuler2bothPeriodic(U, N, n, c, Amp,BP, D, m, kaph, kbet, L, P, H, k, y)
% scheme to solve in REFERENCE DOMAIN
% input: 
% U = initial condition
% N - n = number of iterations
% c = vector of average speed of each interface 
% D = vector of diffusion rates, D(1) = D1, D(2) = D2
% m = vector of mortality rates, m(i) = mi
% kaph = proportionality constant on trailing edge, kbet = proportionality
% constant at leading edge
% P = vector of nodal count, P(1) = p1, P(2) = p0, P(3) = p2, P(4) = p,
% pi = number of nodes on closure(Omegai), p = total number of nodes
% H = vector of mesh widths ROW VECTOR
% k = time step
% y = grid on REFERENCE domain 
%%%% Below variables defined as above
p1 = P(1); 
p0 = P(2); 
p2 = P(3);
p = P(4);
%%%% Above variables defined as above

if size(H,2) > size(H,1) % if H is a row vector 
    H = transpose(H); % make H a column vector.
end
if size(y,2) > size(y,1) % if y is a row vector
    y = transpose(y); % make y a column vector.
end

% Ai is the matrix for Omegai inner node discretization
sizeA1 = [p1+1, p1+3]; %row,col, computations from A1 are on nodes [1, p1+3], includes interface equations at trailing edge
sizeA0 = [p0, p0+3]; %row,col, computations from A0 are on nodes [p1+1, p1+p0+3], includes interface equations at leading edge
sizeA2 = [p2-1,p2]; %row,col, computations from A2 are on nodes [p1+p0+2, p-1], p1+p0+2 update calss to node p1+p0-1, hence #columns > #rows by 1
%

% constant coefficients for boundary/interface conditions
aPlusTrailing = (2*H(p1+1) + H(p1+2))/(H(p1+1)*(H(p1+1) + H(p1+2)));
bPlusTrailing = (H(p1+1) + H(p1+2))/(H(p1+1)*H(p1+2));
cPlusTrailing = H(p1+1)/(H(p1+2)*(H(p1+1) + H(p1+2)));
%
aMinusTrailing = (2*H(p1-1) + H(p1-2))/(H(p1-1)*(H(p1-1) + H(p1-2)));
bMinusTrailing = (H(p1-1) + H(p1-2))/(H(p1-1)*H(p1-2));
cMinusTrailing = H(p1-1)/(H(p1-2)*(H(p1-1) + H(p1-2)));
%
neumannNegInfty = [1;-1];
densityTrailing = [-kaph;1];
% aPlusTrailing = coeff in front of U_j for 3point right-sided limit discretization at trailing edge
% bPlusTrailing = coeff in front of U_{j+1} for 3point right-sided limit discretization at trailing edge
% cPlusTrailing = coeff in front of U_{j+2} for 3point right-sided limit discretization at trailing edge
% 
% aMinusTrailing =  coeff in front of U_j for 3point left-sided limit discretization at trailing edge
% bMinusTrailing = coeff in front of U_{j-1} for 3point left-sided limit discretization at trailing edge
% cMinusTrailing = coeff in front of U_{j-2} for 3point left-sided limit discretization at trailing edge
% 
% neumannNegInfty = neumann boundary condition coefficients (2 point right-sided limit) at x_{-\infty}
% densityTrailing = coeff of density matching across trailing edge
%
aPlusLeading = (2*H(p1+p0+1) + H(p1+p0+2))/(H(p1+p0+1)*(H(p1+p0+1) + H(p1+p0+2)));
bPlusLeading = (H(p1+p0+1) + H(p1+p0+2))/(H(p1+p0+1)*H(p1+p0+2));
cPlusLeading = H(p1+p0+1)/(H(p1+p0+2)*(H(p1+p0+1) + H(p1+p0+2)));
%
aMinusLeading = (2*H(p1+p0-1) + H(p1+p0-2))/(H(p1+p0-1)*(H(p1+p0-1) + H(p1+p0-2)));
bMinusLeading = (H(p1+p0-1) + H(p1+p0-2))/(H(p1+p0-1)*H(p1+p0-2));
cMinusLeading = H(p1+p0-1)/(H(p1+p0-2)*(H(p1+p0-1) + H(p1+p0-2)));
%
densityLeading = [1;-kbet];
neumannInfty = [1;-1];
%
% aPlusLeading = coeff in front of U_j for 3point right-sided limit discretization at leading edge 
% bPlusLeading = coeff in front of U_{j+1} for 3point right-sided limit discretization at leading edge 
% cPlusLeading = coeff in front of U_{j+2} for 3point right-sided limit discretization at leading edge 
% 
% aMinusLeading =  coeff in front of U_j for 3point left-sided limit discretization at leading edge 
% bMinusLeading = coeff in front of U_{j-1} for 3point left-sided limit discretization at leading edge 
% cMinusLeading = coeff in front of U_{j-2} for 3point left-sided limit discretization at leading edge 
%
% neumannInfty = neumann boundary condition coefficients (2 point right-sided limit) at x_{\infty}

F = sparse(p, 1);
% F contains the nonlinear components of the updating function
% identity matrix same size as matrix A

% Eulers loop for scheme in REFERENCE frame
%display(n)
%display(N)
while n < N % returns n = N;
    % build matrix A
    Gamma1Prime = c(1) + Amp(1)*BP(1)*cos(BP(1)*(n+1)*k);
    Gamma2Prime = c(2) + Amp(2)*BP(2)*cos(BP(2)*(n+1)*k);
    
    Gamma1 = c(1)*(n+1)*k + Amp(1)*sin(BP(1)*(n+1)*k);
    Gamma2 = c(2)*(n+1)*k + Amp(2)*sin(BP(2)*(n+1)*k) + L(2);
    
    xt = y*(Gamma2Prime - Gamma1Prime)/L(2) + Gamma1Prime; % derivative of inverse mapping with respect to t NOTE: vector size p dependent on time
    
    xy = (Gamma2 - Gamma1)/L(2); % derivative of inverse mapping with respect to y. NOTE: scalar AND dependent on time! 
    
    v = xt./xy; % vector of time and space dependent advective coefficient
    
    sub1 = -D(1)./((xy^2)*H(2:p1-1).*H(1:p1-2)) + min(0, v(2:p1-1))./H(1:p1-2); % -D1/(h_jh_{j-1}) + min(0,v_j)/h_{j-1}, j = 2,...,p1-1
    sub0 = -1./((xy^2)*H(p1+2:p1+p0-1).*H(p1+1:p1+p0-2)) + min(0, v(p1+2:p1+p0-1))./H(p1+1:p1+p0-2); % 1/(h_jh_{j-1}) + min(0,v_j)/h_{j-1}, j = p1+2,...,p1+p0-1
    sub2 = -D(2)./((xy^2)*H(p1+p0+2:p-1).*H(p1+p0+1:p-2)) + min(0, v(p1+p0+2:p-1))./H(p1+p0+1:p-2); % D2/(h_jh_{j-1}) + min(0,v_j)/h_{j-1}, j = p1+p0+2,...,p-1
    %
    % subi = value along subdiagonal in matrix Ai excluding entries from
    % boundary/interface conditions
    cen1 = -min(0, v(2:p1-1))./H(1:p1-2) + max(0, v(2:p1-1))./H(2:p1-1) + D(1)*(H(1:p1-2) + H(2:p1-1))./((xy^2)*(H(2:p1-1).^2).*H(1:p1-2)) + m(1);% -min(0, v_j)/h_{j-1} + max(0,v_j)/h_j + D1(h_{j-1} + h_j)/(xy^2*h_j^2h_{j-1}) + m_1, j = 2,...,p1-1
    cen0 = -min(0, v(p1+2:p1+p0-1))./H(p1+1:p1+p0-2) + max(0, v(p1+2:p1+p0-1))./H(p1+2:p1+p0-1) + (H(p1+1:p1+p0-2) + H(p1+2:p1+p0-1))./((xy^2)*(H(p1+2:p1+p0-1).^2).*H(p1+1:p1+p0-2));% -min(0, v_j)/h_{j-1} + max(0,v_j)/h_j +(h_{j-1} + h_j)/(xy^2*h_j^2h_{j-1}), j = p1+2,...,p1+p0-1
    cen2 = -min(0, v(p1+p0+2:p-1))./H(p1+p0+1:p-2) + max(0, v(p1+p0+2:p-1))./H(p1+p0+2:p-1) + D(2)*(H(p1+p0+1:p-2) + H(p1+p0+2:p-1))./((xy^2)*(H(p1+p0+2:p-1).^2).*(H(p1+p0+1:p-2))) + m(2);% -min(0, v_j)/h_{j-1} + max(0,v_j)/h_j + D2(h_{j-1} + h_j)/(xy^2*h_j^2h_{j-1}) + m_2, j = p1+p0+2,...,p-1
    %
    % ceni = value along main diagonal in matrix Ai excluding entries from
    sup1 = -D(1)./((xy^2)*H(2:p1-1).^2) - max(0, v(2:p1-1))./H(2:p1-1);% -D1/(xy^2*h_j^2) - max(0, v_j)/h_j, j = 2,...,p1-1
    sup0 = -1./((xy^2)*H(p1+2:p1+p0-1).^2) - max(0, v(p1+2:p1+p0-1))./H(p1+2:p1+p0-1);% -1/(xy^2*h_j^2) - max(0,v_j)/h_j, j = p1+2,...p1+p0-1
    sup2 = -D(2)./((xy^2)*H(p1+p0+2:p-1).^2) - max(0, v(p1+p0+2:p-1))./H(p1+p0+2:p-1); % -D2/(xy^2*h_j^2) - max(0,v_j)/h_j, j = p1+p0+2,...,p-1
    %
    % supi = value along sup diagonal in matrix Ai 
    %
    % coefficients for boundary/interface conditions
    fluxTrailing = [-D(1)*cMinusTrailing/xy; D(1)*bMinusTrailing/xy; -(Gamma1Prime + D(1)*aMinusTrailing/xy); Gamma1Prime - aPlusTrailing/xy; bPlusTrailing/xy; -cPlusTrailing/xy];
    %
    % fluxTrailing = coeff of flux matching across trailing edge
    %
    fluxLeading = [cMinusLeading/xy; -bMinusLeading/xy; Gamma2Prime + aMinusLeading/xy; -Gamma2Prime + D(2)*aPlusLeading/xy; -D(2)*bPlusLeading/xy; D(2)*cPlusLeading/xy];
    % 
    % fluxTrailing = coeff of flux matching across leading edge
    %
    %indexing rule for sparse matrix (i(k), j(k)) = v(k); i.e., (row index, column index) = v
    sizeA = sizeA1(1) + sizeA0(1) + sizeA2(1);
    % size of matrix A, NB: A is a square matrix!
    %
    A = sparse([ones(1,2), 2:p1-1, 2:p1-1, 2:p1-1, p1*ones(1,2), (p1+1)*ones(1, 6)], [1:2, 1:p1-2, 2:p1-1, 3:p1, p1:p1+1, p1-2:p1+3], ...
        vertcat(neumannNegInfty, k*sub1, 1+ k*cen1, k*sup1, densityTrailing, fluxTrailing), sizeA, sizeA);
    A = A + sparse([p1+2:p1+p0-1, p1+2:p1+p0-1, p1+2:p1+p0-1, (p1+p0)*ones(1,2), (p1+p0+1)*ones(1,6)], [p1+1:p1+p0-2, p1+2:p1+p0-1, p1+3:p1+p0, p1+p0:p1+p0+1, p1+p0-2:p1+p0+3],...
        vertcat(k*sub0, 1+k*cen0, k*sup0, densityLeading, fluxLeading), sizeA, sizeA);
    A = A + sparse([p1+p0+2:p-1, p1+p0+2:p-1, p1+p0+2:p-1, p*ones(1,2)], [p1+p0+1:p-2, p1+p0+2:p-1, p1+p0+3:p, p-1:p], vertcat(k*sub2, 1+k*cen2, k*sup2, neumannInfty), sizeA, sizeA);
    % 
%     figure(9)
%     hold on
%     spy(A)
%     pause(1)
    %

    % A = linear operator for updating function

    % update F
    F(p1+2:p1+p0-1) = U(p1+2:p1+p0-1).*(1-U(p1+2:p1+p0-1));

    % update inner node

    U = A\(vertcat(0, U(2:p1-1), 0, 0, U(p1+2:p1+p0-1), 0, 0, U(p1+p0+2:p-1), 0) + k*F);
    
    % update n
    n = n+1;
end
    
end
